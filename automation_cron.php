<?php
/**
 * Sistema de Automa√ß√µes - Cron Job
 * Este arquivo deve ser executado periodicamente via cron job
 * Exemplo: 0,30 * * * * php /path/to/automation_cron.php
 */

require_once 'includes/config.php';
require_once 'includes/db_connect.php';

// Verificar se √© uma execu√ß√£o via cron
if (!isset($_GET['cron']) || $_GET['cron'] !== 'true') {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'error' => 'Acesso negado. Use ?cron=true']);
    exit;
}

// Log de execu√ß√£o
$logFile = 'automation_logs.txt';
$timestamp = date('Y-m-d H:i:s');

function writeCronLog($message) {
    global $logFile, $timestamp;
    $logEntry = "[$timestamp] $message\n";
    file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
}

// 1. Verificar e atualizar status automaticamente
function checkAndUpdateStatus($pdo) {
    writeCronLog("Iniciando verifica√ß√£o de status...");
    // √öltimo registro por c√≥digo
    $sql = "SELECT rs.codigo, rs.cidade, rs.status_atual, rs.data
            FROM rastreios_status rs
            INNER JOIN (
                SELECT codigo, MAX(data) AS max_data
                FROM rastreios_status
                GROUP BY codigo
            ) t ON t.codigo = rs.codigo AND t.max_data = rs.data
            WHERE rs.status_atual NOT LIKE '%Entregue%'
              AND rs.data < DATE_SUB(NOW(), INTERVAL 2 HOUR)";
    $results = fetchData($pdo, $sql);
    $updated = 0;
    foreach ($results as $row) {
        $codigo = $row['codigo'];
        $cidade = $row['cidade'];
        $ultimo_status = $row['status_atual'];
        $novo_status = '';
        $novo_titulo = '';
        $novo_subtitulo = '';
        $nova_cor = '';
        if (strpos($ultimo_status, 'Objeto postado') !== false) {
            $novo_status = 'üöö Em tr√¢nsito';
            $novo_titulo = 'üöö Em tr√¢nsito';
            $novo_subtitulo = 'A caminho do centro de distribui√ß√£o';
            $nova_cor = 'bg-orange-500';
        } elseif (strpos($ultimo_status, 'Em tr√¢nsito') !== false) {
            $novo_status = 'üè¢ No centro de distribui√ß√£o';
            $novo_titulo = 'üè¢ No centro de distribui√ß√£o';
            $novo_subtitulo = 'Processando encaminhamento';
            $nova_cor = 'bg-yellow-500';
        } elseif (strpos($ultimo_status, 'No centro de distribui√ß√£o') !== false) {
            $novo_status = 'üöÄ Saiu para entrega';
            $novo_titulo = 'üöÄ Saiu para entrega';
            $novo_subtitulo = 'Saiu para entrega ao destinat√°rio';
            $nova_cor = 'bg-red-500';
        }
        if ($novo_status) {
            $data_nova = date('Y-m-d H:i:s');
            $ins = "INSERT INTO rastreios_status (codigo, cidade, status_atual, titulo, subtitulo, data, cor) VALUES (?, ?, ?, ?, ?, ?, ?)";
            try {
                executeQuery($pdo, $ins, [$codigo, $cidade, $novo_status, $novo_titulo, $novo_subtitulo, $data_nova, $nova_cor]);
                $updated++;
                writeCronLog("Status atualizado para $codigo: $novo_status");
            } catch (Exception $e) {
                writeCronLog("Erro ao atualizar status para $codigo: " . $e->getMessage());
            }
        }
    }
    writeCronLog("Verifica√ß√£o de status conclu√≠da. $updated rastreios atualizados.");
    return $updated;
}

// 2. Verificar taxas pendentes e aplicar alertas
function checkPendingTaxes($pdo) {
    writeCronLog("Verificando taxas pendentes...");
    $sql = "SELECT rs.codigo, rs.cidade, rs.taxa_valor, rs.taxa_pix, rs.data
            FROM rastreios_status rs
            INNER JOIN (
                SELECT codigo, MAX(data) AS max_data
                FROM rastreios_status
                GROUP BY codigo
            ) t ON t.codigo = rs.codigo AND t.max_data = rs.data
            WHERE rs.taxa_valor IS NOT NULL AND rs.taxa_pix IS NOT NULL
              AND rs.data < DATE_SUB(NOW(), INTERVAL 24 HOUR)";
    $results = fetchData($pdo, $sql);
    $alertas = 0;
    foreach ($results as $row) {
        $codigo = $row['codigo'];
        $cidade = $row['cidade'];
        $taxa_valor = $row['taxa_valor'];
        writeCronLog("ALERTA: Taxa pendente h√° mais de 24h - C√≥digo: $codigo, Cidade: $cidade, Valor: R$ $taxa_valor");
        $alertas++;
    }
    writeCronLog("Verifica√ß√£o de taxas conclu√≠da. $alertas alertas gerados.");
    return $alertas;
}

// 3. Verificar rastreios "presos" (sem atualiza√ß√£o h√° muito tempo)
function checkStuckRastreios($pdo) {
    writeCronLog("Verificando rastreios presos...");
    $sql = "SELECT rs.codigo, rs.cidade, rs.data AS ultima_data, rs.status_atual
            FROM rastreios_status rs
            INNER JOIN (
                SELECT codigo, MAX(data) AS max_data
                FROM rastreios_status
                GROUP BY codigo
            ) t ON t.codigo = rs.codigo AND t.max_data = rs.data
            WHERE rs.status_atual NOT LIKE '%Entregue%'
              AND rs.data < DATE_SUB(NOW(), INTERVAL 3 DAY)";
    $results = fetchData($pdo, $sql);
    $presos = 0;
    foreach ($results as $row) {
        $codigo = $row['codigo'];
        $cidade = $row['cidade'];
        $ultima_data = $row['ultima_data'];
        $ultimo_status = $row['status_atual'];
        writeCronLog("ALERTA: Rastreio preso - C√≥digo: $codigo, Cidade: $cidade, √öltima atualiza√ß√£o: $ultima_data, Status: $ultimo_status");
        $presos++;
    }
    writeCronLog("Verifica√ß√£o de rastreios presos conclu√≠da. $presos rastreios encontrados.");
    return $presos;
}

// 4. Gerar relat√≥rio autom√°tico (executar apenas aos domingos √†s 8h)
function generateWeeklyReport($pdo) {
    if (date('N') == 7 && date('H') == 8) { // Domingo √†s 8h
        writeLog("Gerando relat√≥rio semanal...");
        
        try {
            // Estat√≠sticas da semana
            $inicio_semana = date('Y-m-d', strtotime('monday this week'));
            $fim_semana = date('Y-m-d', strtotime('sunday this week'));
            
            $total_rastreios = fetchOne($pdo, "SELECT COUNT(DISTINCT codigo) as total FROM rastreios_status WHERE DATE(data) BETWEEN ? AND ?", [$inicio_semana, $fim_semana])['total'];
            $entregues = fetchOne($pdo, "SELECT COUNT(DISTINCT codigo) as total FROM rastreios_status WHERE status_atual LIKE '%Entregue%' AND DATE(data) BETWEEN ? AND ?", [$inicio_semana, $fim_semana])['total'];
            $com_taxa = fetchOne($pdo, "SELECT COUNT(DISTINCT codigo) as total FROM rastreios_status WHERE taxa_valor IS NOT NULL AND DATE(data) BETWEEN ? AND ?", [$inicio_semana, $fim_semana])['total'];
            
            $relatorio = "RELAT√ìRIO SEMANAL - $inicio_semana a $fim_semana\n";
            $relatorio .= "Total de rastreios: $total_rastreios\n";
            $relatorio .= "Entregues: $entregues\n";
            $relatorio .= "Com taxa: $com_taxa\n";
            $relatorio .= "Taxa de entrega: " . ($total_rastreios > 0 ? round(($entregues / $total_rastreios) * 100, 2) : 0) . "%\n";
            
            // Salvar relat√≥rio
            file_put_contents('relatorio_semanal_' . date('Y-m-d') . '.txt', $relatorio);
            writeLog("Relat√≥rio semanal gerado com sucesso.");
            
            return true;
        } catch (Exception $e) {
            writeLog("Erro ao gerar relat√≥rio semanal: " . $e->getMessage(), 'ERROR');
            return false;
        }
    }
    return false;
}

// 5. Limpeza de logs antigos
function cleanupOldLogs() {
    writeLog("Executando limpeza de logs antigos...");
    
    // Manter apenas logs dos √∫ltimos 30 dias
    $logFile = 'automation_logs.txt';
    if (file_exists($logFile)) {
        $lines = file($logFile);
        $cutoff_date = date('Y-m-d', strtotime('-30 days'));
        $filtered_lines = [];
        
        foreach ($lines as $line) {
            if (preg_match('/\[(\d{4}-\d{2}-\d{2})/', $line, $matches)) {
                if ($matches[1] >= $cutoff_date) {
                    $filtered_lines[] = $line;
                }
            }
        }
        
        file_put_contents($logFile, implode('', $filtered_lines));
        writeLog("Limpeza de logs conclu√≠da.");
    }
}

// Executar todas as automa√ß√µes
try {
    writeCronLog("=== IN√çCIO DA EXECU√á√ÉO DE AUTOMA√á√ïES ===");
    
    $status_updated = checkAndUpdateStatus($pdo);
    $taxes_alerted = checkPendingTaxes($pdo);
    $stuck_found = checkStuckRastreios($pdo);
    $report_generated = generateWeeklyReport($pdo);
    cleanupOldLogs();
    
    writeCronLog("=== FIM DA EXECU√á√ÉO DE AUTOMA√á√ïES ===");
    writeCronLog("Resumo: $status_updated status atualizados, $taxes_alerted alertas de taxa, $stuck_found rastreios presos");
    
    // Retornar status para monitoramento
    header('Content-Type: application/json');
    echo json_encode([
        'success' => true,
        'timestamp' => $timestamp,
        'status_updated' => $status_updated,
        'taxes_alerted' => $taxes_alerted,
        'stuck_found' => $stuck_found,
        'report_generated' => $report_generated
    ]);
    
} catch (Exception $e) {
    writeCronLog("ERRO: " . $e->getMessage());
    header('Content-Type: application/json');
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage(),
        'timestamp' => $timestamp
    ]);
}
?>
